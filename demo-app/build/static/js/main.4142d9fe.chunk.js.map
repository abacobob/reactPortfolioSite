{"version":3,"sources":["orderModule.js","serviceWorker.js","index.js"],"names":["OrderParent","props","componentDidMount","axios","get","then","response","setState","menu","data","placeOrder","order","state","orderArray","forEach","item","push","orderPrice","price","reduce","a","b","sendOrder","map","name","post","console","log","length","swal","Table","borderless","striped","responsive","index","key","toFixed","icon","addToOrder","e","target","id","removeFromOrder","splice","className","Button","color","UncontrolledCollapse","toggler","Container","Row","Col","this","calculatePrice","React","Component","OrderMenu","onClick","ClientOrder","prices","OrderNow","Boolean","window","location","hostname","match","date","Date","day","getDate","month","getMonth","App","Landing","Intro","md","Menu","getFullYear","desc","Footer","href","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4142d9fe.chunk.js","sourcesContent":["//This module creates the toggleable 'Order for delivery box'\r\n//and handles the data transfer between the order form and the\r\n//express server. \r\n\r\nimport React from 'react';\r\nimport { Container, Row, Col, Table, Button, UncontrolledCollapse } from 'reactstrap';\r\n\r\n//Axios handles the HTTP requests\r\nimport axios from 'axios';\r\n\r\n//Sweetalert provides improved window alerts\r\nimport swal from '@sweetalert/with-react';\r\n\r\n\r\n//Creates the parent component for the order form and holds the state\r\nclass OrderParent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { orderArray: [], menu: [] };\r\n    }\r\n\r\n    //Function: retrieves the menu data from the server upon page load.\r\n    //If the server is not running, both the Menu and the interactive order form will be empty.\r\n    componentDidMount = () => {\r\n        axios.get('http://localhost:5000').then(response => this.setState({ menu: response.data }))\r\n\r\n    }\r\n\r\n    //Function: sends the client order to the server.\r\n    placeOrder = () => {\r\n        let order = []\r\n\r\n        this.state.orderArray.forEach((item) => { order.push(item) })\r\n\r\n        //Calculate the price of the client's order\r\n        let orderPrice = [0];\r\n        this.state.orderArray.forEach((item) => { orderPrice.push(item.price) })\r\n        orderPrice = orderPrice.reduce((a, b) => { return a + b })\r\n\r\n        //POST the order to the server\r\n        let sendOrder = []\r\n        order.map((item) => {sendOrder.push(item.name)});\r\n        axios.post('/', [{ 'Dishes': sendOrder }, { 'Total Price': orderPrice }]).then(response => console.log(response.data))\r\n\r\n        //Confirm the order on screen with a sweetalert pop-up box (conditional operator)\r\n        order.length === 0 ? swal(<div> \r\n            <h3>There's nothing here!</h3>\r\n            <p>Add some items to your order and try again.</p>\r\n        </div>)\r\n\r\n            : swal(<div>\r\n\r\n                <h4>Order confirmed!</h4>\r\n                <h6>Here is a summary:</h6>\r\n\r\n\r\n                <Table borderless striped responsive>\r\n                    <tbody>\r\n                        {this.state.orderArray.map((item,index) => {\r\n                            return <tr>\r\n                                <td key ={'swalItem' + index}>{item.name}</td>\r\n                                <td key ={'swalPrice' + index}>€{item.price.toFixed(2)}</td>\r\n                            </tr>\r\n                        })\r\n                        }\r\n                    </tbody>\r\n                </Table>\r\n\r\n                <h3>Total price : € {orderPrice.toFixed(2)}</h3>\r\n\r\n            </div>,\r\n                { icon: 'success' })\r\n        //End of sweet alert\r\n    }\r\n    //End of the 'Place Order' function\r\n\r\n    //Function: 'Add to Order' button functionality (adds the desired item to the client's order)\r\n    addToOrder = (e) => {\r\n        let order = this.state.orderArray\r\n        order.push(this.state.menu[e.target.id])\r\n\r\n        this.setState({ orderArray: order })\r\n    }\r\n    //End of 'Add to Order' button functionality\r\n\r\n    //Function: 'Remove from Order' button functionality (removes the selected item from the client's order)\r\n    removeFromOrder = (e) => {\r\n        let order = this.state.orderArray\r\n        order.splice(e.target.id, 1)\r\n        this.setState({ orderArray: order })\r\n    }\r\n    //End of 'Remoce from Order' button functionality\r\n\r\n    //Renders the dynamic order module to the app\r\n    render() {\r\n        return (\r\n\r\n            <div className='orderModule'>\r\n                <div>\r\n                    <h3 className='sectionHeader'>Order for delivery</h3>\r\n                    <p className='sectionHeader'><i>Place your order for delivery (terms and conditions apply)</i></p>\r\n\r\n                    <div className='orderHeader'>\r\n                        <Button color=\"info\" id=\"openOrderButton\">\r\n                            Order now\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                <UncontrolledCollapse toggler=\"#openOrderButton\">\r\n                    <Container className='orderForm'>\r\n\r\n                        <Row>\r\n                            <Col><OrderMenu orderArray={this.state.orderArray} addToOrder={this.addToOrder} menu={this.state.menu} /></Col>\r\n                            <Col><ClientOrder orderArray={this.state.orderArray} removeFromOrder={this.removeFromOrder} menu={this.state.menu} /></Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <OrderNow placeOrder={this.placeOrder} calculatePrice={this.calculatePrice} />\r\n                        </Row>\r\n                    </Container>\r\n                </UncontrolledCollapse>\r\n\r\n            </div>\r\n\r\n\r\n        )\r\n    }\r\n}\r\n//End of parent component\r\n\r\n//Component: interactive menu; used for creating a custom food order\r\nclass OrderMenu extends React.Component {\r\n    render() {\r\n        return (\r\n            <Table striped borderless responsive>\r\n                <thead>\r\n                    <tr>\r\n                        <th>\r\n                            Dish\r\n                        </th>\r\n                        <th>\r\n                            Price\r\n                        </th>\r\n                        <th>\r\n                            Add to order\r\n                        </th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {this.props.menu.map((item, index) => {\r\n                        return <tr>\r\n                            <td key ={'OrderMenuItem' + index}>{item.name}</td>\r\n                            <td key ={'OrderMenuPrice' + index}>€{item.price.toFixed(2)}</td>\r\n                            <td key ={'OrderMenuButton' + index}>{<button id={index} className='addToOrderButton' onClick={this.props.addToOrder} >Add to order</button>}</td>\r\n                        </tr>\r\n                    })\r\n                    }\r\n                </tbody>\r\n\r\n            </Table>\r\n        )\r\n    }\r\n}\r\n//End of interactive menu component\r\n\r\n//Component: Order management; displays the client's food order, calculates the total price, and allows the client to remove items from the food order\r\nclass ClientOrder extends React.Component {\r\n\r\n    render() {\r\n\r\n        let prices = []\r\n        this.props.orderArray.forEach((item) => { prices.push(item.price) })\r\n        prices.length > 0 ? prices = prices.reduce(function (a, b) { return a + b }) : prices = [0]\r\n\r\n        return (\r\n            this.props.orderArray >= 0 ? <div>\r\n                <h3 className='sectionHeader'>Your order</h3>\r\n                <p className='sectionHeader'>There's nothing here yet!</p>\r\n            </div>\r\n                :\r\n                <div>\r\n                    <h3 className='sectionHeader'>Your order</h3>\r\n                    <Table striped borderless responsive>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>\r\n                                    Dish\r\n                                </th>\r\n                                <th>\r\n                                    Price\r\n                                </th>\r\n                                <th>\r\n                                    Remove\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.props.orderArray.map((item, index) => {\r\n                                return <tr>\r\n                                    <td key = {'ClientOrderItem' + index}>{item.name}</td>\r\n                                    <td key ={'ClientOrderPrice' + index}>€{item.price.toFixed(2)}</td>\r\n                                    <td key ={'ClientOrderButton' + index}>{<button id={index} onClick={this.props.removeFromOrder} className='removeFromOrderButton'>Remove</button>}</td>\r\n                                </tr>\r\n                            })\r\n                            }\r\n                        </tbody>\r\n\r\n                    </Table>\r\n                    <div>\r\n                        <h3>Total price: €{prices.toFixed(2)}</h3>\r\n                    </div>\r\n                </div>\r\n        )\r\n    }\r\n\r\n}\r\n//End of the order management component\r\n\r\n//Submits the order to the restaurant via an express server\r\nclass OrderNow extends React.Component {\r\n    render() {\r\n        return <Button id='placeOrderButton' color='info' onClick={this.props.placeOrder}>Place Order</Button>\r\n    }\r\n}\r\n//End of order submission\r\n\r\n//Export the module to the primary app\r\nexport default OrderParent","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\n\n//Importing CSS files and reactstrap components\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Row, Col, Table} from 'reactstrap';\n\n//Importing custom modules\nimport OrderParent from './orderModule.js';\nimport * as serviceWorker from './serviceWorker';\n\n\n//date functionality for 'daily menu'\nlet date = new Date();\n\n//set the day suffix\nlet day = date.getDate();\n\nif (day === 1 || day === 21 || day === 31) { day = day + 'st'}\nelse if (day === 2 || day === 22) { day = day + 'nd'}\nelse if (day === 3 || day === 23) { day = day + 'rd'}\nelse { day = day + 'th'};\n\n//converting the numerical month to text\nlet month = date.getMonth();\nswitch (month) {\n  case 0: month = 'January';\n    break;\n  case 1: month = 'February';\n    break;\n  case 2: month = 'March';\n    break;\n  case 3: month = 'April';\n    break;\n  case 4: month = 'May';\n    break;\n  case 5: month = 'June';\n    break;\n  case 6: month = 'July';\n    break;\n  case 7: month = 'August';\n    break;\n  case 8: month = 'September';\n    break;\n  case 9: month = 'October';\n    break;\n  case 10: month = 'November';\n    break;\n  case 11: month = 'December';\n    break;\n\n  default:\n    break;\n}\n//end of date functionality\n\n//App assembly \nclass App extends React.Component {\n\n  render() {\n    return (<div>\n      <Landing />\n      <Intro />\n      <Menu />\n      <OrderParent />\n      <Footer />\n    </div>\n    )\n  }\n}\n//End of app assembly\n\n//Non-interactive components below:\n//---------------------------------\n\n\n//Create the landing image and text \nclass Landing extends React.Component {\n  render() {\n    return <div className='header'>\n      <div className='headerText'>\n        <h1>'Valle de la Sella' Bar and grill</h1>\n        <h3>Traditional Spanish cuisine </h3>\n        <h3>in the heart of the Picos de Europa</h3>\n      </div>\n    </div>\n  }\n}\n//end of landing section\n\n//Create the responsive information boxes below the landing image\nclass Intro extends React.Component {\n  render() {\n    return (\n      <Container className='intro'>\n        <Row>\n          <Col md=\"4\">\n            <h3>Local ingredients</h3>\n            <p >Our kitchen uses only the finest ingredients from the mountains, rivers, seas and forests of Asturias.</p>\n          </Col>\n          <Col md=\"4\">\n            <h3>Seasonal flavors</h3>\n            <p>Our menu changes daily depending on what is available and in season, so you will never have the same experience twice.</p>\n          </Col>\n          <Col md=\"4\">\n            <h3>World-class cuisine</h3>\n            <p>Our award-winning cuisine demonstrates traditional home-style cooking, always prepared to the highest standard.</p>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n//End of information boxes\n\n\n//Daily menu (non-interactive, updated from the express server)\nclass Menu extends React.Component {\n  constructor() {\n    super();\n    this.state = ({ menu: [] })\n  }\n  componentDidMount = () => {\n    axios.get('http://localhost:5000').then(response => this.setState({ menu: response.data }))\n\n  }\n\n  render() {\n    return (\n      <div >\n        <hr></hr>\n        <h3 className='sectionHeader'>Our menu today ({month} {day}, {date.getFullYear()})</h3>\n        <p className='sectionHeader'><i>All dishes subject to availability</i></p>\n        <Table striped borderless responsive>\n          <thead>\n            <tr>\n              <th>\n                Dish\n              </th>\n              <th>\n                Description\n              </th>\n              <th>\n                Price\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.menu.map((item,index) => {\n              return <tr>\n                <td key ={'item' + index}>{item.name}</td>\n                <td key ={'description' + index}>{item.desc}</td>\n                <td key ={'price' + index}>€{item.price.toFixed(2)}</td>\n              </tr>\n            })\n            }\n          </tbody>\n\n        </Table>\n      </div>)\n  }\n}\n//end of daily menu\n\n\n\n//Footer\nclass Footer extends React.Component {\n  render() {\n    return <div className='footer'>\n\n      <Container>\n        <Row>\n          <Col><h3 className='sectionHeader'>'Valle de la Sella' bar and grill</h3></Col>\n        </Row>\n\n        <Row>\n          <Col><h5>This website is for demonstration purposes only.</h5>\n            <p>This site demonstrates various web design technologies and does not represent a real restaurant.</p>\n\n          </Col>\n          <Col><h5>Built with React</h5>\n            <ul>\n              <li>Responsive design with Reactstrap</li>\n              <li>Back-end with Node.js and Express</li>\n              <li>Hosting by Heroku</li>\n            </ul>\n          </Col>\n          <Col><h5>Contact</h5>\n            <ul>\n              <li>Github: <a href='https://github.com/abacobob/reactPortfolioSite' target='blank'>View this project on Github</a></li>\n              <li>LinkedIn: <a href='https://www.linkedin.com/in/chris-davies-819113186/' target='blank'>Contact the developer</a></li>\n            </ul>\n          </Col>\n        </Row>\n        <Row>\n          <Col><h5 className='sectionHeader'>© Copyright 2020</h5></Col>\n        </Row>\n      </Container>\n    </div>\n  }\n}\n//End of footer\n\n\n//Render the App\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}